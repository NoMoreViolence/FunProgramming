// 함수형 프로그래밍 개요

/*
  부수 효과를 미워하고 조합성을 강조하는 프로그래밍 패러다임
  부수 효과를 미워하는 것 => 순수함수, 일급 함수를 활용한다
  조합성을 강조 => 모듈화 수준을 높인다
*/

/* 순수 함수와 일급 함수에 대해서 */

// 순수 함수란? => 외부에 영향을 끼치지 않는 함수

// 순수 함수 예제
const add = (a, b) => a + b;
/*
  add 함수는 외부 변수에 영향을 끼치지 않으며, 외부의 영향을 받지도 않는다.
  리턴하는 값도 같은 값일 때에는 어떠한 상황이라도 같은 값을 리턴합니다.
  즉, 함수를 사용했을 때의 리턴값이 달라질 걱정을 할 필요가 없습니다.
*/

// 순수함수가 아닌 예제 1
let c = 10;
const add2 = (a, b) => a + b + c;

console.log(add2(10, 20)); // 40
c = 20;
console.log(add2(10, 20)); // 50
/*
  이 함수는 외부에 영향을 끼치지 않았지만 외부의 영향을 받았습니다.
  c가 변경되었을 경우에는 같은 입력이라도 리턴값이 달라지게 되며,
  이는 순수함수의 규칙에 어긋납니다
*/

// 순수함수가 아닌 예제 2
let d = 10;
const add3 = (a, b) => {
  d = 25;
  return a + b;
};
/*
  언뜻 보면 리턴값이 외부 변수에 영향을 받지 않고 항상 같은 값만 리턴해
  순수함수라고 볼 수도 있으나, 외부 변수인 d의 값을 변경해 버린다.
  이는 순수함수의 규칙에 맞지 않는다.
*/

// 일급 함수란? => 스스로 객체로 취급되는 함수
// 다른 함수에 파라미터로 전달하고 반환받을 수 있고, 그냥 변수로 저장할 수도 있는 함수
// 변수나 데이터 구조안에 담을 수 있다.
// 파라미터로 전달 할 수 있다.
// 반환값(return value)으로 사용할 수 있다.
// 할당에 사용된 이름과 관계없이 고유한 구별이 가능하다.

// 일급 함수 예제
function sq(a) {
  return a * a;
}
// square,  square2 함수 모두 sq 함수의 리턴값을 가진다
const square = sq(5); // 25
const square2 = sq(6); // 36

// add_maker
function add_maker(a) {
  // 리턴값으로 함수를 전달
  // 클로저가 사용되었다,  이 익명 함수에서 사용되고 있는 a라는 변수는
  // add_maker에서 사용된 인자값 a와 동일하다
  // 어떻게 보면 이 익명 함수는 순수함수가 아니라고 생각할수도 있는데, 그건 아니다
  // 함수가 참조하고 있는 a 라는 값은 어디에서도 사용되지 않았으며,
  // 이 함수에서는 그저 참조만 하고 있다.
  return function(b) {
    return a + b;
  };
}
